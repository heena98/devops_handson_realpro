# üåê Step-by-Step DevOps Project Setup on Gitpod (Java Maven + Full DevOps Stack)
 
# üß≠ GOAL: Simulate a real-time production DevOps project using Gitpod (browser-based environment)
 
# ‚úÖ Tools Covered:
# - Jenkins (CI/CD)
# - Docker (Containerization)
# - Kubernetes (Orchestration)
# - AWS + Terraform (Cloud Infra as Code)
# - SonarQube (Code Quality)
# - JFrog Artifactory (Artifact Repo)
# - Prometheus + Grafana (Monitoring)
# - Ansible (Config Management)
 
# ---------------------------------------------
# üìÅ STEP 1: GITPOD SETUP (DEVELOPER ENVIRONMENT)
# ---------------------------------------------
# In real-time projects, every DevOps engineer works from a secure, reproducible environment. 
# We use Gitpod here to simulate a cloud-based DevOps workstation.
 
image:
  file: .gitpod.Dockerfile
 
ports:
  - port: 8080   # Jenkins (CI/CD)
    onOpen: open-preview
  - port: 9000   # SonarQube (Code quality)
    onOpen: open-preview
  - port: 8081   # JFrog Artifactory (Artifacts repo)
    onOpen: open-preview
  - port: 9090   # Prometheus (Monitoring)
    onOpen: open-preview
  - port: 3000   # Grafana (Visualization)
    onOpen: open-preview
  - port: 8000   # App service (for testing deployments)
    onOpen: open-preview
 
# ‚öôÔ∏è tasks: Commands to run when the workspace starts
tasks:
  - name: Prepare
 
    # üß† Real-Time Use:
    # These are the packages DevOps engineers commonly install in workstations.
    # Keep environments reproducible and avoid manual steps!
 
    init: |
      sudo apt update
      sudo apt install -y unzip default-jdk maven docker.io
      curl -fsSL https://get.docker.com | sh
      sudo usermod -aG docker gitpod
      echo "‚úÖ Gitpod DevOps environment ready."
 
    # üß† Real-Time Use:
    # Run once the init block completes.
    # Used to notify or start post-setup commands like Jenkins bootstrap
 
    command: |
      echo "‚û°Ô∏è You are now inside a DevOps-ready workspace."
 
# üß† REMEMBER (REAL-TIME):
# - Real-time projects have a standard environment image (AWS Cloud9, Vagrant, Dockerized Ubuntu, etc.)
# - All DevOps tools must be scripted to auto-install or containerized
# - Access is often restricted ‚Äî you must use ports, config files, and logs to debug issues
 
# ‚ùå What we DON'T do in real-time:
# - Run everything manually without script/infra-as-code
# - Install tools without version control or automation
 
# ‚úÖ WHAT DEVOPS ENGINEERS DO HERE:
# - Set up reproducible environments
# - Use IaC (Terraform/Ansible) to configure machines
# - Use containerization to deploy apps/tools
# - Secure access to CI/CD tools like Jenkins
# - Enable monitoring/alerting for running services
 
# NEXT STEP: Create .gitpod.Dockerfile ‚Üí the blueprint of your DevOps machine (JDK, Docker, Terraform, etc.)
